<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on another blog about coding</title>
    <link>//gfrivolt.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on another blog about coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Feb 2013 18:00:48 +0200</lastBuildDate>
    <atom:link href="//gfrivolt.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Backbone forms: How to get ids for objects created on the client side?</title>
      <link>//gfrivolt.github.io/post/20130210-backbone-forms-how-to-get-ids-for-objects-created-on-the-client-side/</link>
      <pubDate>Sun, 10 Feb 2013 18:00:48 +0200</pubDate>
      
      <guid>//gfrivolt.github.io/post/20130210-backbone-forms-how-to-get-ids-for-objects-created-on-the-client-side/</guid>
      <description>&lt;p&gt;I am building an application which is built with &lt;em&gt;Backbone.js&lt;/em&gt;. It contains several forms, which make it possible to create sub-items in &lt;em&gt;collections&lt;/em&gt;. I run into the issue of getting the id for the recently created items. Let me explain the scenario:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;a new model instance is created with and an empty &lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the form gets saved triggering a POST or PUT request&lt;/li&gt;
&lt;li&gt;the server receives and saves the new and updated items&lt;/li&gt;
&lt;li&gt;the new items get the &lt;code&gt;ids&lt;/code&gt; filled out&lt;/li&gt;
&lt;li&gt;all items are sent back with updated server-side &lt;code&gt;ids&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The issue is with mapping the new &lt;code&gt;ids&lt;/code&gt; to the instances which are on the client side without an &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Backbone.js&lt;/em&gt; generates a unique client-side &lt;code&gt;cid&lt;/code&gt; for every object. The idea was to serialize the &lt;code&gt;cid&lt;/code&gt; and send it back from the server with the server side &lt;code&gt;id&lt;/code&gt;. As server I use rails. I added new virtual attribute &lt;code&gt;cid&lt;/code&gt; to the model and serialized it. For the client models serializing (&lt;code&gt;toJSON&lt;/code&gt;) and parsing needed to be updated. Method &lt;code&gt;toJSON&lt;/code&gt; was the easy part:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;toJSON: function() {
  return _.extend(toJSON.__super__.constructor.apply(this, arguments),
      { cid: this.cid })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bit trickier is handling of the response coming from the server. It&amp;rsquo;s necessary to identify the existing item using the &lt;code&gt;cid&lt;/code&gt; and update it with the new server side &lt;code&gt;id&lt;/code&gt;. After exploring several possible ways, how to do it wrong, I was &lt;a href=&#34;github.com/documentcloud/backbone/pull/2177&#34;&gt;advised&lt;/a&gt; to override the &lt;code&gt;parse&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;parse: function (resp) {
  return _.map(resp, function (attrs) {
    var cid = attrs.cid;
    delete attrs.cid;
    var existing = this.get(cid);
    return existing ? existing.set(attrs).attributes : attrs;
  }, this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That simple definition of the &lt;code&gt;parse&lt;/code&gt; method showed me the elegance of backbone. Searching for a simple solution proved to be worthwhile.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Non-Modal Inline Dialogs: Ask Questions in Awesome Ways</title>
      <link>//gfrivolt.github.io/post/20120715-non-modal-inline-dialogs-ask-questions-in-awesome-ways/</link>
      <pubDate>Sun, 15 Jul 2012 18:00:48 +0200</pubDate>
      
      <guid>//gfrivolt.github.io/post/20120715-non-modal-inline-dialogs-ask-questions-in-awesome-ways/</guid>
      <description>&lt;p&gt;Asking questions, confirmations from the users is a pretty usual part of any
user interface. Still often I find tackling this simple task solved in
unsatisfying way. The simplest solution is the &lt;code&gt;confirm(&#39;ask your question..&#39;);&lt;/code&gt;
dialog. However, this often ruins the otherwise possibly clean design. Confirm
dialogs are modal and therefore users can not proceed further actions without
answering the questions. But what if you do not need immediate answers?
Often it is enough leaving the dialog questions opened. In such situation try
using &amp;ldquo;inline dialogs&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://s3.amazonaws.com/georgefrivolt.blog/modaldialog.png&#34; alt=&#34;simple modal dialog with a yes-no question&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s build a simple scenario. We have three simple events which the user can
trigger: calling a firemen, calling police or ambulance. Obviously triggering
these events could be useful to handle with a simple question before they are
really triggered. If this security question is answered positively, the event
is triggered, otherwise the original &lt;em&gt;Call the &amp;hellip;&lt;/em&gt; link is rendered.
The dialog blocks are divided into a trigger and question part.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markup&#34;&gt;    &amp;lt;DIV CLASS=&#39;dialog_block&#39; DATA-MESSAGE=&#39;Calling the firemen!&#39;&amp;gt;
      &amp;lt;A HREF=&amp;quot;#&amp;quot; CLASS=&amp;quot;dialog_trigger&amp;quot;&amp;gt;Call the Firemen!&amp;lt;/A&amp;gt;
      &amp;lt;DIV CLASS=&amp;quot;dialog_question&amp;quot;&amp;gt;
        Call? 
        &amp;lt;A HREF=&amp;quot;#&amp;quot; CLASS=&amp;quot;answer_yes&amp;quot;&amp;gt;Yes&amp;lt;/A&amp;gt;
        &amp;lt;A HREF=&amp;quot;#&amp;quot; CLASS=&amp;quot;answer_no&amp;quot;&amp;gt;No&amp;lt;/A&amp;gt;
      &amp;lt;/DIV&amp;gt;
    &amp;lt;/DIV&amp;gt;
    &amp;lt;!-- do something similar for the two other calls --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For handling the dialog actions I use jQuery now. We need only three simple
callbacks for handlers: activation of the question trigger, handler for the yes
and the no answer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var turnOffDialogQuestion = function(el) {
  $dialog_block = getDialogBlock(el);
  $dialog_block
  .find(&#39;.dialog_question&#39;)
  .fadeOut(&#39;fast&#39;,
    function() {
      $dialog_block
      .find(&#39;.dialog_trigger&#39;)
      .fadeIn(&#39;fast&#39;);
    });
};
var getDialogBlock = function(el) {
  return $(el).parents(&#39;.dialog_block&#39;);
};
$(document).ready(function() {
  $(&#39;.dialog_trigger&#39;).click(function(ev) {
    $dialog_block = getDialogBlock(this);
    $(this).fadeOut(&#39;fast&#39;,
      function() {
        $dialog_block
        .find(&#39;.dialog_question&#39;)
        .fadeIn(&#39;fast&#39;);
      });
    ev.preventDefault();
    return false;
  });
  $(&#39;.dialog_question .answer_yes&#39;)
  .click(function(ev) {
    alert(getDialogBlock(this).data(&#39;message&#39;));
    turnOffDialogQuestion(this);
    ev.preventDefault();
    return false;
  });
  $(&#39;.dialog_question .answer_no&#39;)
  .click(function(ev) {
    turnOffDialogQuestion(this);
    ev.preventDefault();
    return false;
  });
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>